Verify & Publish Contract Source Code
Source code verification provides transparency for users interacting with smart contracts. By uploading the source code, Etherscan will match the compiled code with that on the blockchain. Read more.

A simple and structured interface for verifying smart contracts that fit in a single file.

1
Enter Contract Details
2
Verify & Publish
Upload Contract Source Code
If the contract compiles correctly at REMIX, it should also compile correctly here.
We have limited support for verifying contracts created by another contract and there is a timeout of up to 45 seconds for each contract compiled.
For programatic contract verification, check out the Contract API Endpoint.
Contract Address:
0xfA7b8c553C48C56ec7027d26ae95b029a2abF247
Compiler Type:
SINGLE FILE / CONCATENATED METHOD
Compiler Version:
v0.8.19+commit.7dd6d404
Enter the Solidity Contract Code below *
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title ETHG Recovery Token (ETHGR) - Optimized Version
 * @dev Gas-optimized version for deployment
 * @author Deployed by: 0x058C8FE01E5c9eaC6ee19e6673673B549B368843
 */
contract ETHGRecovery is ERC20, Ownable {
    
    // Migration tracking
    mapping(address => bool) public hasMigrated;
    bool public migrationEnabled = true;
    
    // Events
    event TokensMigrated(address indexed holder, uint256 amount);
    
    constructor() ERC20("ETHG Recovery", "ETHGR") Ownable(msg.sender) {}
    
    /**
     * @dev Migrate trapped ETHG tokens for authorized wallet
     * Amount: 1,990,000 ETHG tokens
     */
    function migrateMyTrappedETHG() external {
        require(msg.sender == 0x058C8FE01E5c9eaC6ee19e6673673B549B368843, "Unauthorized");
        require(migrationEnabled, "Migration disabled");
        require(!hasMigrated[msg.sender], "Already migrated");
        
        uint256 amount = 1990000 * 10**18; // 1,990,000 tokens
        
        hasMigrated[msg.sender] = true;
        _mint(msg.sender, amount);
        
        emit TokensMigrated(msg.sender, amount);
    }
    
    /**
     * @dev Emergency migration for other holders
     */
    function migrateTrappedETHG(uint256 amount) external {
        require(migrationEnabled, "Migration disabled");
        require(!hasMigrated[msg.sender], "Already migrated");
        require(amount > 0, "Invalid amount");
        
        hasMigrated[msg.sender] = true;
        _mint(msg.sender, amount);
        
        emit TokensMigrated(msg.sender, amount);
    }
    
    /**
     * @dev Toggle migration (owner only)
     */
    function toggleMigration() external onlyOwner {
        migrationEnabled = !migrationEnabled;
    }
    
    /**
     * @dev Emergency mint (owner only)
     */
    function emergencyMint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }
}
Advanced Configuration
Optimization 
No
Runs (Optimizer) 
200
EVM Version to target 
default (compiler defaults)
License Type 
3) MIT License (MIT)
Constructor Arguments ABI-encoded
For contracts that were created with constructor parameters
For additional information on Constructor Arguments, see our KB entry

