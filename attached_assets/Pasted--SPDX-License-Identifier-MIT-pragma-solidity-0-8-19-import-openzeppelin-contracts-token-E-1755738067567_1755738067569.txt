// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ETHGRecovery is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 1000000000 * 10**18;
    
    mapping(address => bool) public hasMigrated;
    mapping(address => uint256) public originalETHGBalance;
    
    address public constant ORIGINAL_ETHG = 0x3fC29836E84E471a053D2D9E80494A867D670EAD;
    
    bool public migrationEnabled = true;
    uint256 public totalMigrated = 0;
    
    event TokensMigrated(address indexed holder, uint256 ethgAmount, uint256 recoveryAmount);
    event MigrationStatusChanged(bool enabled);
    
    constructor() ERC20("ETHG Recovery", "ETHGR") Ownable(msg.sender) {}
    
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(balanceOf(msg.sender) >= amount, "ERC20: transfer amount exceeds balance");
        return super.transfer(to, amount);
    }
    
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(balanceOf(from) >= amount, "ERC20: transfer amount exceeds balance");
        return super.transferFrom(from, to, amount);
    }
    
    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Would exceed max supply");
        _mint(to, amount);
    }
    
    function migrateMyTrappedETHG() external {
        require(msg.sender == owner(), "Only contract owner can migrate");
        require(!hasMigrated[msg.sender], "Already migrated");
        require(migrationEnabled, "Migration disabled");
        
        uint256 trappedAmount = 1990000 * 10**18;
        
        hasMigrated[msg.sender] = true;
        originalETHGBalance[msg.sender] = trappedAmount;
        totalMigrated += trappedAmount;
        
        _mint(msg.sender, trappedAmount);
        
        emit TokensMigrated(msg.sender, trappedAmount, trappedAmount);
    }
    
    function migrateFromETHG(uint256 ethgAmount) external {
        require(migrationEnabled, "Migration disabled");
        require(!hasMigrated[msg.sender], "Already migrated");
        require(ethgAmount > 0, "Amount must be greater than 0");
        require(ethgAmount <= MAX_SUPPLY, "Amount exceeds max supply");
        
        hasMigrated[msg.sender] = true;
        originalETHGBalance[msg.sender] = ethgAmount;
        totalMigrated += ethgAmount;
        
        _mint(msg.sender, ethgAmount);
        
        emit TokensMigrated(msg.sender, ethgAmount, ethgAmount);
    }
    
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    function toggleMigration() external onlyOwner {
        migrationEnabled = !migrationEnabled;
        emit MigrationStatusChanged(migrationEnabled);
    }
    
    function getMigrationInfo(address account) external view returns (
        bool migrated,
        uint256 originalBalance,
        uint256 recoveryBalance
    ) {
        return (
            hasMigrated[account],
            originalETHGBalance[account],
            balanceOf(account)
        );
    }
    
    function emergencyWithdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
}