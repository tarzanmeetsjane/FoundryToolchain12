Verify & Publish Contract Source Code
Source code verification provides transparency for users interacting with smart contracts. By uploading the source code, Etherscan will match the compiled code with that on the blockchain. Read more.

A simple and structured interface for verifying smart contracts that fit in a single file.

1
Enter Contract Details
2
Verify & Publish
 Error! Invalid constructor arguments provided. Please verify that they are in ABI-encoded format
Upload Contract Source Code
If the contract compiles correctly at REMIX, it should also compile correctly here.
We have limited support for verifying contracts created by another contract and there is a timeout of up to 45 seconds for each contract compiled.
For programatic contract verification, check out the Contract API Endpoint.
Contract Address:
0xfa7b8c553c48c56ec7027d26ae95b029a2abf247
Compiler Type:
SINGLE FILE / CONCATENATED METHOD
Compiler Version:
v0.8.19+commit.7dd6d404
Enter the Solidity Contract Code below *
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ETHGRecovery is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 1000000000 * 10**18; // 1 billion tokens
    
    constructor(
        string memory name,
        string memory symbol,
        uint256 initialSupply
    ) ERC20(name, symbol) Ownable(msg.sender) {
        require(initialSupply <= MAX_SUPPLY, "Initial supply exceeds maximum");
        _mint(msg.sender, initialSupply);
    }
    
    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Would exceed max supply");
        _mint(to, amount);
    }
    
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    // Transparent transfer function - no hidden restrictions
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        return super.transfer(to, amount);
    }
    
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        return super.transferFrom(from, to, amount);
    }
}
Advanced Configuration
Optimization 
No
Runs (Optimizer) 
200
EVM Version to target 
default (compiler defaults)
License Type 
3) MIT License (MIT)
Constructor Arguments ABI-encoded
For contracts that were created with constructor parameters
0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000001a5661dbcd0208fc00000000000000000000000000000000000000000000000000000000000000000d4554484720526563766572790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000545544847520000000000000000000000000000000000000000000000000000000
For additional information on Constructor Arguments, see our KB entry


